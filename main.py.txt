import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = "8271883027:AAEKDXpOy_2U8ZhOY4oMOI4WBjTLfK4CXqE"
ADMIN_ID = 564553716

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect("signals.db")
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS signals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    signal_text TEXT,
    status TEXT
)''')
conn.commit()
conn.close()

# –û–±—Ä–æ–±–Ω–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("üü© –£–≤—ñ–π—à–æ–≤", callback_data="entered"),
        InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ", callback_data="skipped")
    ], [
        InlineKeyboardButton("üéØ TP", callback_data="tp"),
        InlineKeyboardButton("üõë SL", callback_data="sl")
    ], [
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)

# Callback –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    action = query.data

    conn = sqlite3.connect("signals.db")
    c = conn.cursor()
    c.execute("INSERT INTO signals (user_id, signal_text, status) VALUES (?, ?, ?)",
              (user_id, "Test signal", action))
    conn.commit()
    conn.close()

    await query.edit_message_text(text=f"–¢–∏ –≤–∏–±—Ä–∞–≤: {action.upper()}")

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("signals.db")
    c = conn.cursor()
    c.execute("SELECT status, COUNT(*) FROM signals GROUP BY status")
    results = c.fetchall()
    conn.close()

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    for status, count in results:
        text += f"{status.upper()}: {count}\n"

    await update.message.reply_text(text)

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
